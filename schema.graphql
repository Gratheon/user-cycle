scalar JSON
scalar DateTime
scalar URL

type Query {
	user: UserOrError
	invoices: [Invoice]
	apiTokens: [APIToken]
	shareTokens: [ShareToken]
	translate(en: String, key: String, tc: String): Locale
}

type APIToken {
	id: ID!
	token: String!
}
type ShareToken {
	id: ID!
	token: String!

	name: String
	scopes: JSON
	targetUrl: URL
}

type Invoice {
	id: ID!
	total: Float
	currency: String
	date: DateTime
	url: URL
}

type Locale {
	id: ID!
	en: String!
	ru: String
	et: String
	tr: String
	pl: String
	de: String
	fr: String
	key: String
}

type Mutation {
	register(first_name: String, last_name: String, email:String!, password: String!): LoginResult
	login(email: String!, password: String!): LoginResult
	generateApiToken: APIToken
	generateShareToken(name: String!, scopes: JSON!, sourceUrl: URL!): ShareToken
	validateApiToken(token: String): ValidateTokenResult
	updateUser(user: UserUpdateInput!): UpdateUserResult
	createCheckoutSession: URL
	cancelSubscription: CancelSubscriptionResult
	deleteUserSelf: Error

	revokeApiToken(token: String!): Error
	revokeShareToken(token: String!): Error
}

type TokenUser {
	id: ID!
}

type UserSession {
	key: String
	user: User
}

type Error{
	code: String
}

union UserOrError = User | Error
union ValidateTokenResult = TokenUser | Error
union LoginResult = UserSession | Error
union UpdateUserResult = User | Error
union CancelSubscriptionResult = User | Error

type User {
	id: ID!
	email: String
	first_name: String
	last_name: String

	"""
	Language code: en, ru, tr, et, pl
	"""
	lang: String
	date_added: DateTime
	date_expiration: DateTime
	hasSubscription: Boolean
	isSubscriptionExpired: Boolean


	"""
	Billing plan: free, base, pro
	"""
	billingPlan: String
}

input UserUpdateInput{
	first_name: String
	last_name: String
	lang: String
}